<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Linux CLI Practical Test ‚Äì Batch 2025</title>
  <style>
    body {
      margin: 0;
      font-family: Arial, sans-serif;
      display: flex;
      height: 100vh;
    }
    .sidebar {
      width: 280px;
      background: #2c3e50;
      color: white;
      display: flex;
      flex-direction: column;
      padding: 25px;
    }
    .sidebar h2 {
      font-size: 22px;
      margin-bottom: 20px;
    }
    .tab-button {
      background: none;
      border: none;
      color: white;
      text-align: left;
      padding: 10px;
      font-size: 14px;
      cursor: pointer;
    }
    .tab-button:hover, .tab-button.active {
      background: #34495e;
    }
    .content {
      flex: 1;
      padding: 25px;
      overflow-y: auto;
    }
    .task {
      background-color: #add8e6;
      color: black;
      font-size: 16px;
      font-weight: bold;
      padding: 10px;
      margin: 20px 0;
      border-radius: 8px;
      display: none;
    }
    .task.active {
      display: block;
    }
    .task h2 {
     color: #1a5276;
     font-size: 26px;
     font-weight: 900;
     margin-bottom: 15px;
    }
    .task h3 {
     color: #d35400;
     font-size: 20px;
     margin-top: 15px;
     margin-bottom: 10px;
    }
    .task h3 {
      margin-top: 0;
    }
    .subtask {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 10px;
      gap: 20px;
      flex-wrap: wrap;
      word-break: break-word;
    }
    .subtask span {
      flex-shrink: 0;
    }
    .buttons button {
      margin-left: 5px;
      padding: 5px 10px;
      cursor: pointer;
      min-width: 80px;
    }
    .done {
      background-color: #2ecc71;
      color: white;
    }
    .revisit {
      background-color: #e67e22;
      color: white;
    }
  </style>
</head>
<body>

  <div class="sidebar">
    <h2>üíª Linux CLI Test ‚Äì 2025</h2>
    <button class="tab-button active" onclick="showTab('section1', this)">1. Overview</button>
    <button class="tab-button" onclick="showTab('section2', this)">2. User Migration Mini Project</button>
    <button class="tab-button" onclick="showTab('section2-1', this)">2.1 Manual User Account Creation</button>
    <button class="tab-button" onclick="showTab('section2-2', this)">2.2 Troubleshooting User Accounts</button>
    <button class="tab-button" onclick="showTab('section3', this)">3. SSH Login & Authentication logs</button>
    <button class="tab-button" onclick="showTab('section3-1', this)">3.1 SSH Key Based Authentication</button>
    <button class="tab-button" onclick="showTab('section4', this)">4. Patching & YUM Pkg Managment</button>
    <button class="tab-button" onclick="showTab('section4-1', this)">4.1 Post-Patching Checks</button>
    <button class="tab-button" onclick="showTab('section5', this)">5. Web Server Setup</button>
    <button class="tab-button" onclick="showTab('section6', this)">6. Network Troubleshooting</button>

  </div>

  <div class="content">

    <!-- SECTION 1 -->
    <div id="section1" class="task active">
    <h2 style="font-size: 26px; font-weight: 900; margin-bottom: 15px;">
       üß© Section 1: Overview
    </h2>

     <h3> <p><b>Welcome to your Linux CLI Practical Test. This test is designed to simulate **real-world job tasks** for a Junior to Intermediate Linux System Administrator. Each section includes: </b></p> </h3>
        <div class="subtask"> * üìò What you'll learn (philosophy)</div>
        <div class="subtask"> * üè¢ Real job use cases</div>
        <div class="subtask"> * ‚úÖ Hands-on tasks (NO answers provided)</div>
        <div class="subtask"> * üí° Helpful hints</div>
        <div class="subtask"> * üß† Summary of concepts</div>
        <div class="subtask"> * üìù Resume-ready bullet points</div>
     <h3> <p><b> You are expected to complete the tasks **on your own VM in vcenter** and document outputs where needed.</b></p>
   </div> </h3>

      <!-- SECTION 2 -->
    <div id="section2" class="task">
  <h2 style="font-size: 26px; font-weight: 900; margin-bottom: 15px;">
    üß© Section 2: User Migration Mini Project
  </h2>

  <h3>üìò What This Section Teaches</h3>
  <p>
    Move users from one server to another by backing up and restoring core identity and home directory files.
  </p>

  <h3>üè¢ Real-World Scenario</h3>
  <p>
    You are asked to migrate all users and home data from LINOOP server to your new VM.
  </p>
 <h3>‚úÖ Tasks</h3>
      <p><b>Scenario:</b> Migrate users & home data from LINOOP to your VM.</p>
      <div class="subtask">1. On the linoop.ddns.net server (10.1.10.100), navigate to your home directory and run the command "sudo /usr/local/bin/backup_user.sh". This will create a compressed archive named data.tar.gz in your home directory. The archive will include your entire home directory (/home/$USER) as well as the system files /etc/passwd, /etc/group, and /etc/shadow. <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
<div class="subtask">2. Use the scp command to securely transfer the data.tar.gz file from the remote server linoop.ddns.net (10.1.10.100) to your VM under the /tmp/project25/ directory. <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
<div class="subtask">3. Extract the contents of the transferred data.tar.gz archive inside the /tmp/project25/ directory.<span class="buttons"><button>Done</button><button>Revisit</button></span></div>
<div class="subtask">4. On your VM, use sudo to create a backup of your existing /home/$USER directory along with the files /etc/passwd, /etc/group, and /etc/shadow. Store this backup as a compressed archive named vm_files.tar.gz inside /tmp/project25/.<span class="buttons"><button>Done</button><button>Revisit</button></span></div>
<div class="subtask">5. Switch to root user and replace/copy the home directory and the files /etc/passwd, /etc/group, and /etc/shadow on your VM with the corresponding migrated versions located in the home and etc directories under /tmp/project25/.<span class="buttons"><button>Done</button><button>Revisit</button></span></div>
<div class="subtask">6. Search (grep) for the user kobi in your current /etc/passwd file and save the matching entry into /tmp/project25/vm_info.txt.<span class="buttons"><button>Done</button><button>Revisit</button></span></div>
<div class="subtask">7. After migrating of accounts from linoop.ddns.net and replacement of directory and files, your linoop.ddns.net account is now available on the VM. Since the home directory was migrated using sudo, its ownership currently belongs to root. On the VM, change ownership of your home directory  (recursively) to your corresponding user account from linoop.ddns.net (10.1.10.100), while you should be root user. Switch to this user account, run the pwd command, and redirect its output to /tmp/login_file1.txt.<span class="buttons"><button>Done</button><button>Revisit</button></span></div>
<div class="subtask">8. Again switch to root user, create a new user account using the useradd command, ensuring the username follows the format firstname_lastname and matches the credentials you use for VPN login. Once the account is created, set a password of your choice and switch to this user. Create a directory /tmp/linux_cli_test, run the pwd command, and redirect its output to /tmp/linux_cli_test/login_file2.txt. Appreciate! continue for the rest of lab as this new user.<span class="buttons"><button>Done</button><button>Revisit</button></span></div>

    <h3>üí° Hints & Tips</h3>
  <ul>
    <li>Always backup system files first</li>
    <li>When you execute the command "sudo /usr/local/bin/backup_user.sh" the script internally runs "tar -cvzf data.tar.gz /home/$USER /etc/passwd /etc/group /etc/shadow" As a result, a compressed archive named data.tar.gz is created. Although you are a regular user, using sudo temporarily elevates your privileges, allowing you to include system files such as /etc/shadow in the archive, which would otherwise be inaccessible.</li>
    <li>* After replacement of home directory and files if ask for authentication you will use password "Linoop@123!!"</li>
  </ul>

  <h3>üß† Summary</h3>
  <ul>
    <li>You've performed a user migration using system-level tools and secure archiving</li>
  </ul>

  <h3>üìù Resume Bullets</h3>
  <ul>
    <li>Migrated users and home directories between Linux servers using tar and scp</li>
    <li>Preserved system integrity by managing UID/GID mappings and secure backups</li>
  </ul>
  </div>

  <!-- SECTION 2.1 -->
  <div id="section2-1" class="task">
  <h2 style="font-size: 26px; font-weight: 900; margin-bottom: 15px;">
    üß© Section 2.1: Manual User Account Creation
  </h2>

  <h3>üìò What This Section Teaches</h3>
  <p>
    Understand how Linux manages users in <code>/etc/passwd</code> and
    <code>/etc/group</code>. Manual account creation helps you learn the
    foundation of Linux identity management.
  </p>

  <h3>üè¢ Real-World Scenario</h3>
  <p>
    Create a user <code>baker</code> manually without using <code>useradd</code>.
    You must set up the home directory, shell, group, and password manually.
  </p>

  <h3>‚úÖ Tasks</h3>
  <div class="subtask">1. Switch to root user to take Backup `/etc/passwd` to `/tmp/linux_cli_test/passwd.org-09-06-25`<span class="buttons"><button>Done</button><button>Revisit</button></span></div>
  <div class="subtask">2. Manually add the 'baker' user entry to '/etc/passwd'.<span class="buttons"><button>Done</button><button>Revisit</button></span></div>
  <div class="subtask">3. Take Backup `/etc/group` to `/tmp/linux_cli_test/group.org-09-06-25`. Add `baker` group entry in /etc/group file.<span class="buttons"><button>Done</button><button>Revisit</button></span></div>
  <div class="subtask">4. Create '/home/baker' and set permissions 700. <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
  <div class="subtask">5. Copy '.*' files from /etc/skel to '/home/baker' <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
  <div class="subtask">6. Change ownership of '/home/baker' to 'baker:baker' <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
  <div class="subtask">7. Set a password 'Linux@linoop' for 'baker' user <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
  <div class="subtask">8. Switch to `baker` with `su - baker` command. Create a directory /tmp/baker_dir. Now execute command pwd and redirect output to /tmp/baker_home.txt <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
  <div class="subtask">9. Verify the UID, GID, and group memberships of the baker user by running the id baker command. Append the output to the file /tmp/baker_dir/baker_id.txt.<span class="buttons"><button>Done</button><button>Revisit</button></span></div>
  <div class="subtask">10. Log out from the baker account and switch back to the root user. Add baker to the wheel group, then run id baker again to confirm. Redirect the output to /tmp/baker_dir/baker_groups.txt. <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
 <h3>üí° Hints & Tips</h3>
  <ul>
    <li>Use <code>:</code> as the field separator in <code>/etc/passwd</code></li>
    <li>Use <code>chown -R</code> to assign ownership of directories</li>
  </ul>

  <h3>üß† Summary</h3>
  <ul>
    <li>You now know how to manually add users, groups, and configure login environments.</li>
  </ul>

  <h3>üìù Resume Bullets</h3>
  <ul>
    <li>Manually created users and groups by editing system config files</li>
    <li>Configured login environments and access permissions</li>
  </ul>
</div>
    <!-- SECTION 2.2 -->
    
  <div id="section2-2" class="task">
  <h2 style="font-size: 26px; font-weight: 900; margin-bottom: 15px;">
    üß© Section 2.2: Troubleshooting User Accounts
  </h2>

  <h3>üìò What This Section Teaches</h3>
  <p>
    Most Linux login issues relate to environment files, locked accounts, or shell misconfigurations.
  </p>

  <h3>üè¢ Real-World Scenario</h3>
  <p>
    The <code>baker</code> user can‚Äôt log in. You must find the issue and fix it.
  </p>

  <h3>‚úÖ Tasks</h3>
  <div class="subtask">1. As the root user, delete all .bash* files from /home/baker. Then run ls -al /home/baker and append the output to /tmp/baker_dir/baker_env1.<span class="buttons"><button>Done</button><button>Revisit</button></span></div>
<div class="subtask">2. Switch to the baker user and verify whether you are able to obtain the shell prompt successfully. <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
<div class="subtask">3. Restore the .bash* files for baker from /etc/skel. Then run ls -al /home/baker and append the output to /tmp/baker_dir/baker_env2. <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
<div class="subtask">4. Run the bash command and verify that the shell prompt is displayed again. <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
<div class="subtask">5. Switch to the root user. Using the vim editor, lock the baker account by placing * in the second field of the user‚Äôs entry in /etc/passwd. Save and exit. Then, grep 'baker' from /etc/passwd file and redirect the output to /tmp/baker_dir/baker_trouble.txt.<span class="buttons"><button>Done</button><button>Revisit</button></span></div>
<div class="subtask">6. Attempt to switch to the baker user again and observe the behavior.<span class="buttons"><button>Done</button><button>Revisit</button></span></div> 
<div class="subtask">7. Unlock the baker account by removing the * from the second field in /etc/passwd.<span class="buttons"><button>Done</button><button>Revisit</button></span></div>
<div class="subtask">8. Attempt to switch to the baker user again and observe the behavior.<span class="buttons"><button>Done</button><button>Revisit</button></span></div>

  <h3>üí° Hints & Tips</h3>
  <ul>
    <li>Use <code>su - baker</code> to simulate a full login shell</li>
    <li>Permissions should be <code>700</code> on the home directory</li>
  </ul>

  <h3>üß† Summary</h3>
  <ul>
    <li>You now know how to diagnose and fix broken or locked Linux user accounts</li>
  </ul>

  <h3>üìù Resume Bullets</h3>
  <ul>
    <li>Resolved login failures by restoring user environment and correcting permissions</li>
    <li>Diagnosed account lockouts and repaired system-level authentication settings</li>
  </ul>
</div>

    <!-- SECTION 3 -->
    <div id="section3" class="task">
  <h2 style="font-size: 26px; font-weight: 900; margin-bottom: 15px;">
    üß© Section 3: SSH Login & Authentication Logs
  </h2>

  <h3>üìò What This Section Teaches</h3>
  <p>
    SSH (Secure Shell) is the default method for accessing Linux systems remotely. This section teaches you how to initiate SSH, review logs, and troubleshoot failed logins.
  </p>

  <h3>üè¢ Real-World Scenario</h3>
  <blockquote>
    ‚ÄúHey, I can‚Äôt SSH into the server anymore. It just hangs or says access denied.‚Äù
  </blockquote>

  <h3>‚úÖ Tasks</h3>
      <p><b>Scenario:</b> Developer reports failed SSH login. Investigate.</p>
      <div class="subtask">1. SSH from linoop.ddns.net (10.1.10.100) server to your VM using the baker account (observe behavior) <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
<div class="subtask">2. Log in locally to your VM and locate the log file that records SSH login attempts.<span class="buttons"><button>Done</button><button>Revisit</button></span></div>
<div class="subtask">3. Search for entries related to baker or sshd and redirect output to /tmp/linux_cli_test/ssh-log-analysis.txt <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
<div class="subtask">4. Determine if logs indicate incorrect password, account locked, or service not running; echo answer in /tmp/linux_cli_test/ssh-log-analysis.txt <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
<div class="subtask">5. Write a short note summarizing your findings and save it to /tmp/linux_cli_test/ssh-log-analysis.txt.<span class="buttons"><button>Done</button><button>Revisit</button></span></div>

  <h3>üí° Hints & Tips</h3>
  <ul>
    <li>RHEL: <code>/var/log/secure</code></li>
    <li>Debian: <code>/var/log/auth.log</code></li>
    <li>Use <code>ssh -v</code> for verbose output</li>
    <li>Use <code>journalctl -u sshd</code> to read service logs</li>
  </ul>

  <h3>üß† Summary</h3>
  <ul>
    <li>You understand how to test SSH connectivity</li>
    <li>You can read and interpret authentication logs</li>
    <li>You know where to look when SSH fails silently</li>
  </ul>

  <h3>üìù Resume Bullets</h3>
  <ul>
    <li>Diagnosed and resolved SSH login failures using Linux authentication logs</li>
    <li>Analyzed <code>/var/log/secure</code> and <code>journalctl</code> to troubleshoot remote access issues</li>
    <li>Ensured secure and stable SSH login access for Linux servers</li>
  </ul>
  </div>

    <!-- SECTION 3.1 -->
    <div id="section3-1" class="task">
    <h2 style="font-size: 26px; font-weight: 900; margin-bottom: 15px;">
      üß© Section 3.1: SSH Key-Based Authentication
    </h2>

  <h3>üìò What This Section Teaches</h3>
  <p>
    Passwords are slow and insecure. In professional environments, SSH keys are used instead ‚Äî for secure, fast, passwordless login between systems.
    This section teaches you how to:
  </p>
  <ul>
    <li>Generate an SSH key pair</li>
    <li>Deploy it to another server (LINOOP)</li>
 <li>Log in securely without typing a password</li>
  </ul>

  <h3>üè¢ Real-World Scenario</h3>
  <p>
    Your manager says:
    <blockquote>‚ÄúWe‚Äôre disabling password-based SSH. You need to switch to key-based authentication for accessing the LINOOP server.‚Äù</blockquote>
    You‚Äôre expected to create your key pair and deploy it securely to the remote server ‚Äî then confirm it works.
  </p>

     <h3>‚úÖ Tasks</h3>
     <p><b>Scenario:</b> Setup passwordless SSH login using keys.</p>
     <div class="subtask">1. Check if your VM has a .ssh directory and key pair; redirect output to /tmp/linux_cli_test/ssh_file.txt <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
<div class="subtask">2. If .ssh directory exists, remove it; execute 'echo $?' and redirect output to /tmp/linux_cli_test/ssh_file.txt <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
<div class="subtask">3. Generate a new RSA key pair <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
<div class="subtask">4. Copy the public key to linoop.ddns.net (10.1.10.100) under your user account home directory <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
<div class="subtask">5. Test SSH login to linoop.ddns.net (10.1.10.100) without being prompted for a password <span class="buttons"><button>Done</button><button>Revisit</button></span></div>

     <h3>üí° Hints & Tips</h3>
  <ul>
    <li>Use verbose SSH (<code>ssh -v</code>) if unsure why the key isn't working</li>
    <li>Permissions: <code>~/.ssh</code> ‚Üí 700, <code>authorized_keys</code> ‚Üí 600</li>
    <li>Use <code>ssh-copy-id</code> or <code>scp + cat</code> to move the key</li>
  </ul>

  <h3>üß† Summary</h3>
  <ul>
    <li>You know how to use cryptographic keys for authentication</li>
    <li>SSH keys are essential for DevOps, scripting, and security compliance</li>
    <li>You practiced secure key generation, deployment, and troubleshooting</li>
  </ul>

  <h3>üìù Resume Bullet Points</h3>
  <ul>
    <li>Configured passwordless SSH access using RSA key pair authentication</li>
    <li>Implemented secure access policies between Linux systems using authorized keys</li>
    <li>Demonstrated expertise in key management and SSH access hardening</li>
  </ul>
</div>

    <!-- SECTION 4 -->
    <div id="section4" class="task">
  <h2 style="font-size: 26px; font-weight: 900; margin-bottom: 15px;">
    üß© Section 4: Patching, Updates & YUM Package Management
  </h2>

  <h3>üìò What This Section Teaches</h3>
  <p>
    Keeping Linux systems up to date is critical for security, compliance, and stability. This section teaches how to:
  </p>
  <ul>
    <li>Perform pre-patching health checks</li>
    <li>Apply security-only or full updates</li>
    <li>Use YUM to manage packages</li>
    <li>Validate system health after patching</li>
  </ul>

  <h3>üè¢ Real-World Scenario</h3>
  <p>
    Security notifies you:
    <blockquote>‚ÄúA vulnerability scan flagged your VM. Apply the latest security patches now.‚Äù</blockquote>
    You patch only the necessary packages. Later, your team asks you to do a full update and make sure the system reboots cleanly.
  </p>

  <h2>‚úÖ Tasks</h2>
  <h3>üîß Pre-Patching Checklist</h3>
      <div class="subtask">1. Check available space under '/boot' and redirect output to /tmp/linux_cli_test/pre-patching.txt file <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
      <div class="subtask">2. Record your current kernel version and append output to /tmp/linux_cli_test/pre-patching.txt file.<span class="buttons"><button>Done</button><button>Revisit</button></span></div>
      <div class="subtask">3. List mounted file systems and append output to /tmp/linux_cli_test/pre-patching.txt file.<span class="buttons"><button>Done</button><button>Revisit</button></span></div>
      <div class="subtask">4. Check total disk space usage append output to /tmp/linux_cli_test/pre-patching.txt file. <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
      <div class="subtask">5. List all currently running services append output to /tmp/linux_cli_test/pre-patching.txt file.<span class="buttons"><button>Done</button><button>Revisit</button></span></div>

  <h3>üîê Apply Security Patches</h3>
      <div class="subtask">6. Check for security-only updates using YUM and redirect to /tmp/linux_cli_test/patch.txt file.<span class="buttons"><button>Done</button><button>Revisit</button></span></div>
      <div class="subtask">7. Apply security updates only. Now again Check for security-only updates and append info in /tmp/linux_cli_test/patch2.txt file.<span class="buttons"><button>Done</button><button>Revisit</button></span></div>
      <div class="subtask">8. Redirect updated packages to '/tmp/linux_cli_test/security-patches' <span class="buttons"><button>Done</button><button>Revisit</button></span></div>

  <h3>üîÑ Full System Update</h3>
      <div class="subtask">9. Check for all available software updates and store in /tmp/linux_cli_test/full_patch.txt file.<span class="buttons"><button>Done</button><button>Revisit</button></span></div>
      <div class="subtask">10. Apply full system updates (non-security included) and upon completion of update reboot your machine. <span class="buttons"><button>Done</button><button>Revisit</button></span></div>

    </div>

    <!-- SECTION 4.1 -->
    <div id="section4-1" class="task">
    <h2 style="font-size: 26px; font-weight: 900; margin-bottom: 15px;">
        ‚úÖ  Section 4:.1: Post-Patching Checks
    </h2>

    <h2>‚úÖ Tasks</h2>
<h3>üîß Post-patch Checklist</h3>

    <div class="subtask">11. Verify system rebooted; execute 'who -b' and append output to /tmp/linux_cli_test/post-patching.txt <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
<div class="subtask">12. Check disk usage under /boot; append output to /tmp/linux_cli_test/post-patching.txt <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
<div class="subtask">13. Check current kernel version; append output to /tmp/linux_cli_test/post-patching.txt <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
<div class="subtask">14. Compare kernel version before vs after update <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
<div class="subtask">15. Confirm critical service (e.g., httpd) is running and listening; append output to /tmp/linux_cli_test/post-patching.txt <span class="buttons"><button>Done</button><button>Revisit</button></span></div>

    <h3>üí° Hints & Tips</h3>
  <ul>
    <li>Security updates can be listed with YUM plugins or flags</li>
    <li>Kernel updates often require a reboot</li>
    <li>Use <code>systemctl</code> to check if services are enabled and active</li>
  </ul>

  <h3>üß† Summary</h3>
  <ul>
    <li>You safely applied patches using YUM</li>
    <li>You know the difference between security-only and full updates</li>
    <li>You validated system health before and after patching</li>
  </ul>

  <h3>üìù Resume Bullet Points</h3>
  <ul>
    <li>Applied security and full updates using YUM with verification steps</li>
    <li>Recorded kernel and system metrics before and after patching</li>
    <li>Ensured uptime by validating service continuity post-update</li>
  </ul>
</div>


    <!-- SECTION 5 -->
    <div id="section5" class="task">
    <h2 style="font-size: 26px; font-weight: 900; margin-bottom: 15px;">
      üß© Section 5: Web Server Setup & Custom HTML Deployment
    </h2>

    <h3>üìò What This Section Teaches</h3>
    <p>
    Apache (<code>httpd</code>) is one of the most widely used web servers in the world. This section teaches you how to:
    </p>
    <ul>
    <li>Install and manage the Apache service</li>
    <li>Configure firewalls and SELinux for web traffic</li>
    <li>Deploy a custom HTML site to a real web server</li>
    </ul>

    <h3>üè¢ Real-World Scenario</h3>
    <p>
    Your team needs a status dashboard published. You‚Äôre tasked with:
    <blockquote>‚ÄúSet up Apache on your VM and deploy an custome page.‚Äù</blockquote>
    You‚Äôll configure Apache, allow web traffic, and publish custom content.
    </p>

    <h3>‚úÖ Tasks</h3>
      <p><b>Scenario:</b> Deploy Apache and serve custom HTML.</p>
      <div class="subtask">1. Check if httpd is installed; if not, install using yum <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
      <div class="subtask">2. Enable and start the httpd service <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
      <div class="subtask">3. Confirm Apache is listening on port 80 <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
      <div class="subtask">4. Allow HTTP traffic through the firewall <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
      <div class="subtask">5. Set SELinux to permissive mode (initial testing) <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
      <div class="subtask">6. Replace /var/www/html/index.html with "wow amazing I am enjoying this test!!!" <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
      <div class="subtask">7. Reload browser and confirm custom content is visible <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
<h3>üí° Hints & Tips</h3>
  <ul>
    <li>Default document root: <code>/var/www/html</code></li>
    <li>Use <code>systemctl status httpd</code> to check service health</li>
    <li>Run <code>firewall-cmd --list-all</code> to verify allowed services</li>
    <li>Use <code>setenforce 0</code> to set SELinux in permissive mode</li>
    <li>Use <code>getenforce</code> to check SELinux status</li>
  </ul>

  <h3>üß† Summary</h3>
  <ul>
    <li>You deployed and verified a working web server</li>
    <li>You configured firewall rules and SELinux for HTTP</li>
    <li>You served a custom HTML page from the correct document root</li>
  </ul>

  <h3>üìù Resume Bullet Points</h3>
  <ul>
    <li>Deployed Apache web server and hosted custom web content</li>
    <li>Configured system firewall and SELinux for secure web access</li>
    <li>Managed <code>httpd</code> lifecycle using systemd and tested external access</li>
  </ul>
  </div>

    <!-- SECTION 6 -->
    <div id="section6" class="task">
  <h2 style="font-size: 26px; font-weight: 900; margin-bottom: 15px;">
    üß© Section 6: Network Troubleshooting & Diagnostics
  </h2>

  <h3>üìò What This Section Teaches</h3>
  <p>
    Network troubleshooting is a critical real-world skill. This section helps you learn how to:
  </p>
  <ul>
    <li>Inspect and configure interfaces</li>
    <li>Test connectivity</li>
    <li>Diagnose DNS failures</li>
    <li>Use traceroute to isolate network issues</li>
  </ul>

  <h3>üè¢ Real-World Scenario</h3>
  <p>
    You receive a ticket:
    <blockquote>‚ÄúHost unreachable ‚Äî can‚Äôt ping or SSH. Please resolve.‚Äù</blockquote>
    You access the VM from the vSphere console and begin troubleshooting.
  </p>

      <h3>‚úÖ Tasks</h3>
      <p><b>Scenario:</b> Ticket: "Host unreachable ‚Äî diagnose & resolve".</p>
      <div class="subtask">1. List all network interfaces using 2‚Äì3 commands; append output to /tmp/linux_cli_test/networking <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
      <div class="subtask">2. Check if ens192 is connected to a virtual switch; append output to /tmp/linux_cli_test/networking <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
      <div class="subtask">3. Check IP settings for ens192 (IP, subnet mask, default gateway); append output to /tmp/linux_cli_test/networking <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
      <div class="subtask">4. Ping default gateway; append output to /tmp/linux_cli_test/networking <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
      <div class="subtask">5. Ping external IP (e.g., 8.8.8.8); append output to /tmp/linux_cli_test/networking <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
      <div class="subtask">6. Resolve DNS names (e.g., google.com, vc8.linoop.local); append output to /tmp/linux_cli_test/networking <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
      <div class="subtask">7. If DNS fails, identify file for manual IP-hostname mapping; append absolute path to /tmp/linux_cli_test/networking <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
      <div class="subtask">8. Use traceroute to check hops to cnn.com; append output to /tmp/linux_cli_test/networking <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
      <div class="subtask">9. In vCenter, add a second network adapter to VM <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
<div class="subtask">10. Activate new interface and configure DHCP; append output to /tmp/linux_cli_test/networking <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
      <div class="subtask">11. Identify new IP and test connectivity from second interface <span class="buttons"><button>Done</button><button>Revisit</button></span></div>
  <h3>üí° Hints & Tips</h3>
  <ul>
    <li>Use <code>ip a</code>, <code>nmcli dev show</code>, or <code>ifconfig</code></li>
    <li>DNS settings are in <code>/etc/resolv.conf</code></li>
    <li>Static hostname mappings are defined in <code>/etc/hosts</code></li>
    <li>New NICs may appear as <code>ens224</code>, <code>eth1</code>, etc.</li>
    <li>Use <code>nmcli</code> or <code>nmtui</code> to activate and request a DHCP lease</li>
  </ul>

  <h3>üß† Summary</h3>
  <ul>
    <li>You diagnosed link-level, gateway, internet, and DNS issues</li>
    <li>You configured and tested a new interface from vSphere to OS</li>
    <li>You used tools that real sysadmins rely on for production support</li>
  </ul>

  <h3>üìù Resume Bullet Points</h3>
  <ul>
    <li>Troubleshot Linux server connectivity using interface and route analysis</li>
    <li>Configured network interfaces and DNS in virtualized environments</li>
    <li>Diagnosed and resolved real-world network path and DNS issues using traceroute</li>
  </ul>
  </div>

  </div>
 <script>
    function showTab(id, el) {
      document.querySelectorAll('.task').forEach(t => t.classList.remove('active'));
      document.getElementById(id).classList.add('active');

      document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
      el.classList.add('active');
    }

    document.querySelectorAll('.buttons button').forEach(button => {
      button.addEventListener('click', function () {
        const parent = button.closest('.subtask');
        const allButtons = parent.querySelectorAll('button');
        allButtons.forEach(btn => btn.classList.remove('done', 'revisit'));

        if (button.textContent === 'Done') {
          button.classList.add('done');
        } else if (button.textContent === 'Revisit') {
          button.classList.add('revisit');
        }
      });
    });
  </script>
</body>
</html>
